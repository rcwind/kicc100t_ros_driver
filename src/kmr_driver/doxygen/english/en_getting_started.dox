/**
@page enGettingStartedGuide Getting Started

@section kmrClass Overview

The @ref kmr::Kmr class is the first port of call for developing your kmr program. 
All kmr configuration and interaction is done via this class. This guide will cover 
configuration and interaction with the library method api. Interactions via callbacks 
using sigslots is covered especially in the guide on @ref enSigslotsGuide "sigslots".  

@section kmrConfiguration Configuration

Kmr configuration is handled by the @ref kmr::Parameters "kmr::Parameters" class which
is passed to the kmr instance via the @ref kmr::Kmr::init "kmr::Kmr::init()" method. Most of the
parameters to be configured have sane defaults. The only one that requires frequent configuration is 
typically the serial @ref kmr::Parameters::device_port "device_port". Note that on some systems you 
can configure a rule (refer to the @ref enFtdiGuide "ftdi serial device guide") for the device port, 
otherwise you will require one of the usual COM1 or /dev/ttyUSB0 values.

@code
#include <iostream>
#include <kmr_driver/kmr.hpp>
#include <ecl/time.hpp>

class KmrManager {
public:
  KmrManager() {
    kmr::Parameters parameters;
    // change the default device port from /dev/kmr to /dev/ttyUSB0
    parameters.device_port = "/dev/ttyUSB0";
    // Other parameters are typically happy enough as defaults
    // namespaces all sigslot connection names under this value, only important if you want to
    parameters.sigslots_namespace = "/kmr";
    // Most people will prefer to do their own velocity smoothing/acceleration limiting.
    // If you wish to utilise kmr's minimal acceleration limiter, set to true
    parameters.enable_acceleration_limiter = false;
    // If your battery levels are showing significant variance from factory defaults, adjust thresholds.
    // This will affect the led on the front of the robot as well as when signals are emitted by the driver.
    parameters.battery_capacity = 16.5;
    parameters.battery_low = 14.0;
    parameters.battery_dangerous = 13.2;

    // initialise - it will throw an exception if parameter validation or initialisation fails.
    try {
      kmr.init(parameters);
    } catch ( ecl::StandardException &e ) {
      std::cout << e.what();
    }
  }
private:
  kmr::Kmr kmr;
};

int main() {
  KmrManager kmr_manager;
  ecl::Sleep()(5);
  return 0;
}
@endcode

If you compile and run this program, you should hear kmr's starting up chirp followed 
immediately by the shutting down chirp.

@section kmrLibraryApi Library Api

@subsection kmrRawData Raw Data

The kmr driver runs a background thread which continually retrieves packets from the kmr, saving
the raw data, and additionally doing some processing before updating the current state of the robot. 

Raw data can be accessed at any time by one of the following getXXX commands:

- kmr::Kmr::getCoreSensorData
- kmr::Kmr::getDockIRData
- kmr::Kmr::getCliffData
- kmr::Kmr::getCurrentData
- kmr::Kmr::getGpInputData
- kmr::Kmr::getInertiaData
- kmr::Kmr::getRawInertiaData
- kmr::Kmr::getControllerInfoData

The gyro provides both filtered yaw angle as well as unfiltered 3-axis inertial data hence the
two calls above.

@subsection kmrProcessedData Processed Data and Status

The following are convenience methods for accessing the current state of the robot 

- kmr::Kmr::batteryStatus
- kmr::Kmr::getHeading
- kmr::Kmr::getAngularVelocity
- kmr::Kmr::versionInfo : hardware, firmware and software version strings.
- kmr::Kmr::getWheelJointStates
- kmr::Kmr::isAlive : true if a kmr is detected and streaming data.
- kmr::Kmr::isEnabled : true if the motor power is enabled
- kmr::Kmr::isShutdown : true if the worker threads for this driver have been shut down.


@subsection kmrSoftCommands Soft Commands

- kmr::Kmr::resetOdometry

@subsection kmrHardCommands Hard Commands

- kmr::Kmr::setBaseControl
- kmr::Kmr::setLed
- kmr::Kmr::setDigitalOutput
- kmr::Kmr::setExternalPower
- kmr::Kmr::playSoundSequence
- kmr::Kmr::setControllerGain
- kmr::Kmr::getControllerGain

@subsection differentialDriverModule The Differential Drive Module

The final function of importance is the @ref kmr::Kmr::updateOdometry method. This updates the current odometry state
of the robot, fusing encoder and gyro heading data with the previous known state. For deterministic odometry, it is important
this method is called each time a new data packet from the kmr arrives. Refer to the 
@ref enSimpleExample "simple control loop example" for more information and working code to illustrate.

**/
